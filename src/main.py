import torch
import numpy as np
import random
from config import *
from model import JointEstimator, SocialReasoner
import pickle
from data_prep import prepare_data, upsample_data, get_train_valid_test_indices, get_final_data, prep_data
from trainer import Trainer
from sklearn import preprocessing

seed = 0
torch.manual_seed(seed)
np.random.seed(seed)
random.seed(seed)

# tri_0 = [0, 1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 16, 17, 18, 19, 20, 21, 22, 23, 25, 28, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 85, 86, 87, 88, 89, 90, 93, 94, 96, 98, 99, 100, 103, 105, 106, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 158, 160, 162, 164, 165, 166, 169, 171, 172, 173, 174, 175, 176, 177, 178, 180, 183, 185, 186, 189, 190, 191, 193, 194, 196, 197, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 214, 216, 217, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 254, 255, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 304, 305, 306, 307, 308, 309, 310, 313, 315, 316, 317, 318, 319, 320, 321]
# vi_0 = [293, 65, 15, 272, 140, 153, 101, 234, 63, 159, 184, 181, 97, 219, 215, 64, 26, 256, 92, 108, 212, 66, 161, 188, 81, 167, 179, 303, 7, 6, 218, 259]
# tei_0 = [91, 211, 29, 44, 52, 13, 269, 170, 182, 168, 104, 187, 302, 213, 163, 192, 311, 144, 24, 107, 198, 312, 27, 195, 56, 252, 314, 95, 141, 240, 102, 253]
#
# tri_1 = [0, 1, 2, 3, 4, 7, 8, 9, 12, 14, 16, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 30, 32, 33, 34, 36, 38, 39, 40, 41, 42, 43, 46, 48, 49, 50, 51, 52, 53, 55, 56, 58, 59, 61, 62, 63, 64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 93, 94, 95, 97, 98, 99, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 115, 116, 117, 118, 119, 120, 121, 122, 123, 125, 127, 128, 129, 131, 132, 135, 136, 137, 138, 139, 141, 142, 144, 145, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 210, 211, 212, 213, 214, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 243, 244, 245, 246, 248, 249, 250, 251, 253, 254, 255, 256, 257, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 305, 306, 308, 309, 310, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 343, 345, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 360, 362]
# vi_1 = [307, 304, 45, 26, 218, 344, 89, 126, 114, 6, 301, 208, 171, 60, 325, 146, 106, 100, 101, 300, 140, 92, 303, 302, 134, 252, 68, 241, 359, 124, 215, 261, 15, 37, 54, 5]
# tei_1 = [353, 35, 113, 209, 130, 338, 96, 17, 247, 195, 260, 147, 143, 22, 44, 13, 242, 176, 31, 47, 85, 150, 133, 258, 57, 361, 317, 10, 201, 342, 149, 299, 318, 77, 277, 11]

tri_0 = [0, 1, 2, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 63, 64, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 87, 88, 89, 91, 92, 93, 94, 95, 98, 99, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 113, 115, 116, 117, 118, 119, 120, 121, 123, 124, 125, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 143, 144, 147, 148, 149, 150, 151, 152, 153, 154, 155, 157, 158, 159, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 178, 179, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 192, 193, 194, 195, 197, 198, 200, 201, 203, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 221, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 250, 254, 256, 257, 258, 259, 262, 263, 264, 265, 266, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 280, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 301, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 317, 318, 319, 321, 322, 323, 324, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 353, 354, 355, 356, 357, 360, 361, 362, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 378, 379, 380, 381, 383, 384, 385, 386, 387, 390, 391, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 407, 408, 409, 410, 411, 412, 413, 414, 416, 417, 418, 419, 420, 421, 422, 423, 425, 427, 428, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 444, 445, 446, 447, 448, 449, 451, 454, 455, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 475, 476, 477, 478, 481, 482, 483, 484, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 501, 502, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 517, 518, 519, 520, 521, 522, 524, 525, 526, 528, 529, 531, 532, 533, 534, 536, 537, 539, 540, 541, 542, 543, 544, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 576, 578, 579, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 635, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 671, 672, 673, 674, 675, 677, 678, 680, 681, 684, 686, 687, 688, 689, 690, 692, 694, 695, 696, 697, 698, 699, 700, 701, 704, 705, 706, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 739, 740, 741, 743, 744, 745, 747, 748, 750, 751, 753, 754, 755, 756, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 789, 791, 792, 795, 796, 798, 802, 803, 804, 805, 806, 807, 808, 809, 812, 813, 814, 815, 816, 817, 819, 820, 821, 822, 823, 824, 826, 827, 829, 830, 831, 832, 833, 837, 838, 840, 842, 843, 845, 846, 847, 848, 849, 850, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 874, 876, 877, 878, 879, 880, 882, 886, 887, 889, 890, 892, 893, 894, 895, 896, 897, 898, 900, 901, 903, 906, 907, 908, 909, 911, 913, 915, 917, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 930, 931, 932, 934, 936, 937, 938, 939, 940, 941, 942, 943, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958]
vi_0 = [881, 406, 14, 708, 55, 786, 202, 567, 873, 299, 31, 657, 338, 350, 765, 77, 500, 255, 757, 746, 944, 215, 793, 503, 742, 239, 142, 141, 389, 605, 914, 810, 839, 530, 902, 691, 253, 883, 665, 935, 905, 332, 851, 456, 738, 474, 337, 670, 458, 613, 352, 304, 553, 251, 676, 959, 752, 683, 214, 316, 196, 933, 252, 794, 523, 899, 885, 884, 834, 453, 320, 65, 632, 577, 638, 888, 725, 580, 97, 443, 351, 828, 775, 60, 145, 465, 358, 452, 363, 424, 298, 279, 122, 261, 557, 415]
tei_0 = [545, 190, 797, 515, 918, 222, 160, 835, 679, 825, 359, 488, 585, 535, 300, 6, 916, 32, 249, 325, 267, 818, 693, 841, 811, 707, 112, 685, 302, 156, 303, 388, 702, 527, 96, 114, 538, 19, 498, 801, 377, 232, 844, 479, 426, 204, 163, 61, 799, 429, 237, 610, 682, 910, 875, 224, 184, 633, 146, 836, 18, 602, 762, 800, 457, 634, 480, 703, 581, 904, 575, 749, 784, 382, 126, 344, 90, 86, 392, 870, 513, 281, 315, 450, 912, 790, 929, 199, 719, 36, 105, 891, 516, 177, 758, 260]

tri_1 = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 46, 47, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 67, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 108, 109, 110, 111, 112, 114, 115, 116, 117, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 155, 156, 158, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 173, 174, 175, 176, 177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 230, 231, 232, 234, 236, 240, 241, 242, 243, 245, 246, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 277, 278, 279, 280, 283, 284, 285, 286, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 307, 309, 311, 312, 313, 314, 315, 317, 318, 320, 321, 322, 323, 326, 327, 330, 332, 333, 334, 335, 336, 337, 338, 340, 341, 342, 345, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 359, 360, 362, 363, 365, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 392, 393, 394, 396, 397, 398, 399, 401, 402, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 420, 421, 422, 423, 426, 427, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 442, 443, 444, 446, 447, 448, 451, 452, 453, 454, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 481, 482, 483, 486, 487, 488, 489, 490, 491, 493, 494, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 534, 535, 536, 538, 539, 540, 541, 542, 543, 544]
vi_1 = [239, 113, 325, 66, 479, 103, 386, 480, 400, 37, 71, 329, 450, 432, 310, 501, 264, 361, 424, 281, 194, 165, 90, 537, 107, 159, 134, 235, 153, 118, 276, 378, 172, 428, 364, 225, 15, 391, 445, 282, 17, 316, 140, 455, 379, 45, 233, 435, 308, 78, 306, 229, 449, 344]
tei_1 = [57, 287, 68, 305, 339, 48, 533, 328, 237, 507, 270, 1, 346, 492, 133, 191, 120, 523, 93, 372, 29, 157, 244, 154, 358, 208, 20, 485, 484, 456, 319, 419, 463, 94, 425, 495, 466, 178, 135, 222, 82, 343, 404, 14, 16, 238, 247, 324, 331, 416, 403, 441, 395, 148]


def main(**kwargs):
    # Model
    if social_reasoner == 1:
        je = SocialReasoner(social_input_size, hidden_size, social_output_size, leaky_slope, window)
        social = True
    else:
        je = JointEstimator(input_size, hidden_size, output_size, leaky_slope, window)
        social = False


    # Data preparation
    data = pickle.load(open(data_path + train_data_fname, 'rb'))
    # print(data)
    u_true, r_true, n_tot, U_full, A_full, R_full = prepare_data(data)
    clusters = list(n_tot.keys())

    N = u_true[c].shape[0]
    train_indices, valid_indices, test_indices = get_train_valid_test_indices(frac_valid, frac_test, N)

    # print(train_indices)
    # print(valid_indices)
    # print(test_indices)
    if c == 'all':
        n = len(tri_0 + vi_0 + tei_0)
        train_indices = tri_0 + [i + n for i in tri_1]
        valid_indices = vi_0 + [i + n for i in vi_1]
        test_indices = tei_0 + [i + n for i in tei_1]

    train_data_type = data_types[0]
    eval_data_type = data_types[1]

    u_tr_new, r_tr_new, R_f_new, U_f_new, A_f_new = prep_data(u_true[c], r_true[c], R_full[c], U_full[c], A_full[c])
    # print(u_tr_new.shape)
    # print(r_tr_new.shape)
    # print(R_f_new.shape)
    # print(U_f_new.shape)
    # print(A_f_new.shape)

    u_tr_f, r_tr_f, R_f, U_f, A_f = get_final_data(data_types, train_indices, valid_indices, test_indices, u_tr_new, r_tr_new, R_f_new, U_f_new, A_f_new)
    # print(u_true[c][train_indices].shape)
    # print(r_true[c][train_indices].shape)
    # print(R_full[c][:, train_indices, :].shape)
    # print(U_full[c][:, train_indices, :].shape)
    # print(A_full[c][:, train_indices, :].shape)

    u_tr, r_tr, R, U, A = upsample_data(u_true[c][train_indices], r_true[c][train_indices], R_full[c][:, train_indices, :],
                                        U_full[c][:, train_indices, :], A_full[c][:, train_indices, :], window)

    # scaler = preprocessing.StandardScaler()
    # scaler.fit(R)
    # print(scaler.mean_)
    # print(scaler.scale_)
    # # r_tr = scaler.transform(r_tr)
    # R = torch.Tensor(scaler.transform(R))
    # # Trainer class
    # if social_reasoner == 1:
    # U = get_new_U(U)

    trainer = Trainer(je, lr, n_epochs, print_every, thresh, social=social)
    trainer.train(u_tr, r_tr, R, U, A)

    torch.save(je.state_dict(), 'weights_' + str(c) + '.t7')

    R_eval = R_f[eval_data_type]
    # R_eval = torch.Tensor(scaler.transform(R_f[eval_data_type]))
    # if social_reasoner == 1:
    #     U_eval = get_new_U(U_f[eval_data_type])
    # else:
    U_eval = U_f[eval_data_type]
    trainer.eval(u_tr_f[eval_data_type], r_tr_f[eval_data_type], R_eval, U_eval, A_f[eval_data_type])


def get_new_U(U):
    n1, n2, n3 = U.shape
    zeros = torch.zeros(n1, 1)
    ones = torch.ones(n1, 1)
    U_z = U[:, :, 0]
    U_o = U[:, :, 1]
    U_z_new = torch.cat([U_z, zeros], 1)[:, :, None]
    U_o_new = torch.cat([U_o, ones], 1)[:, :, None]
    U = torch.cat([U_z_new, U_o_new], 2)
    return U

if __name__ == '__main__':
    main()